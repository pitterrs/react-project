import React from "react";
import MaterialIconButton from '@material-ui/core/IconButton';
import { IconButtonProps as MaterialIconButtonProps } from '@material-ui/core/IconButton';
import { css } from "@emotion/react";

type FuelSize = 'small' | 'medium' | 'large';

export interface IconButtonProps extends Omit<MaterialIconButtonProps,
  'color' |
  'size' |
  'disableElevation' |
  'disableFocusRipple' |
  'centerRipple' |
  'disableRipple' |
  'disableTouchRipple' |
  'focusRipple' |
  'TouchRippleProps'
> {
  /* Fuel specific sizes */
  size: FuelSize,
  /* Adds outline to IconButton */
  outlined?: boolean
}

const baseIconButtonStyles = css`
  border-radius: var(--fuel-border-radius-md);
  border: 1px solid transparent;

  &:hover {
    background-color: var(--fuel-color-background-action-secondary-hovered);
    color: var(--fuel-color-text-primary);
  }

  &:active {
    background-color: var(--fuel-color-background-action-secondary-pressed);
  }

  &:focus {
    outline: none;
  }

  &[disabled], &.Mui-disabled {
    color: var(--fuel-color-text-action-secondary);
    background-color: transparent;
    opacity: .5;
    cursor: not-allowed;
    pointer-events: auto;
  }

  &.Mui-focusVisible {
    box-shadow: var(--fuel-shadow-focused) !important;
  }
`;

const small = css`
  padding: .1875rem;
`;

const medium = css`
  padding: .3125rem;
`;

const large = css`
  padding: .4375rem;
`;

const outlinedStyles = css`
  box-shadow: var(--fuel-shadow-xs), rgba(0, 0, 0, 0.05) 0px 1px 0px 0px;
  border: 1px solid var(--fuel-color-border-dark);

  &[disabled], &.Mui-disabled {
    color: var(--fuel-color-background-action-secondary-text);
    border-color: var(--fuel-color-border-light);
    box-shadow: none;
  }
`;

const getSizeStyles = (size: 'small' | 'medium' | 'large') => {
  switch (size) {
    case 'small':
      return small;
    case 'large':
      return large;
    default:
      return medium;
  }
}

const getSize = (size: FuelSize) => {
  switch (size) {
    case 'small':
      return 'small';
    default:
      return 'medium';
  }
}

export const IconButton = React.forwardRef<any, IconButtonProps>(
  (
    {
      children,
      size = 'medium',
      outlined,
      ...props
    },
    ref
  ) => {

    const iconButtonSizeStyles = getSizeStyles(size);
    const iconButtonSize = getSize(size);
    const iconButtonOutlinedStyles = outlined && outlinedStyles;

    return (
      <MaterialIconButton
        css={[baseIconButtonStyles, iconButtonSizeStyles, iconButtonOutlinedStyles]}
        size={iconButtonSize}
        ref={ref}
        {...props}
      >
        {children}
      </MaterialIconButton>
    );
  });
