import React from "react";
import MaterialMenuItem from '@material-ui/core/MenuItem';
import { MenuItemProps as MaterialMenuItemProps } from '@material-ui/core/MenuItem';
import { withStyles } from '@material-ui/core/styles';

// Issue with typescript definitions, which require this override. MenuItem is based on ListItem: https://github.com/mui-org/material-ui/issues/14971
export interface MenuItemProps extends MaterialMenuItemProps {
  /* If true, the list item will be a button (using ButtonBase). Props intended for ButtonBase can then be applied to ListItem. */
  button?: any;
}

// Using CSS custom properties with Popover dependent components
// like the menu causes issues as the Popover defaults to attach
// itself to the <body>. If a user is trying to isolate their changes
// to a part of the application, then this approach will not work
// without including a fallback. This approach will not work for themes,
// so we will use the withStyles() method for now.
// const baseMenuItemStyles = css`
//   &:active,
//   &.MuiListItem-root.Mui-selected:active {
//     background-color: var(--fuel-color-background-action-default-pressed, #dddddd);
//   }
// `;

const StyledMenuItem = withStyles((theme) => ({
  root: {
    fontSize: theme.typography.button.fontSize,
    paddingTop: theme.spacing(2),
    paddingBottom: theme.spacing(2),
    lineHeight: '1.5rem',
    '&:active': {
      backgroundColor: theme.palette.grey["200"]
    },
    '&.MuiListItem-root.Mui-selected:active': {
      backgroundColor: theme.palette.grey["200"]
    }
  }
}))(MaterialMenuItem);

export const MenuItem = React.forwardRef<any, MenuItemProps>(
  (
    {
      children,
      ...props
    },
    ref
  ) => {
    return (
      <StyledMenuItem ref={ref} {...props}>
        {children}
      </StyledMenuItem>
    );
  });
