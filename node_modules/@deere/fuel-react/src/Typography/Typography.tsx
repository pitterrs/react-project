import React from "react";
import MaterialTypography from '@material-ui/core/Typography';
import { TypographyProps as MaterialTypographyProps } from '@material-ui/core/Typography';
import { css } from "@emotion/react";

type FuelFontWeight = 'regular' | 'semibold' | 'bold';

type FuelSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl';

type FuelColor = 'initial' | 'inherit' | 'primary' | 'secondary' | 'tertiary' | 'error';

export interface TypographyProps extends Omit<MaterialTypographyProps,
  'color'
> {
  /* Font Size */
  size?: FuelSize;

  /* Font weight */
  fontWeight?: FuelFontWeight;

  /* Color */
  color?: FuelColor;
}

const sizeXs = css`
  font-size: var(--fuel-font-size-xs);
  line-height: var(--fuel-line-height-xs);
`;

const sizeSm = css`
  font-size: var(--fuel-font-size-sm);
  line-height: var(--fuel-line-height-sm);
`;

const sizeMd = css`
  font-size: var(--fuel-font-size-md);
  line-height: var(--fuel-line-height-md);
`;

const sizeLg = css`
  font-size: var(--fuel-font-size-lg);
  line-height: var(--fuel-line-height-lg);
`;

const sizeXl = css`
  font-size: var(--fuel-font-size-xl);
  line-height: var(--fuel-line-height-xl);
`;

const size2xl = css`
  font-size: var(--fuel-font-size-2xl);
  line-height: var(--fuel-line-height-2xl);
`;

const size3xl = css`
  font-size: var(--fuel-font-size-3xl);
  line-height: var(--fuel-line-height-3xl);
`;

const size4xl = css`
  font-size: var(--fuel-font-size-4xl);
  line-height: var(--fuel-line-height-4xl);
`;

const size5xl = css`
  font-size: var(--fuel-font-size-5xl);
  line-height: var(--fuel-line-height-5xl);
`;

const fontWeightRegular = css`
  font-weight: var(--fuel-font-weight-regular);
`;

const fontWeightSemibold = css`
  font-weight: var(--fuel-font-weight-semibold);
`;

const fontWeightBold = css`
  font-weight: var(--fuel-font-weight-bold);
`;

const colorInitial = css`
  color: initial;
`;

const colorInherit = css`
  color: inherit;
`;

const colorPrimary = css`
  color: var(--fuel-color-text-primary);
`;

const colorSecondary = css`
  color: var(--fuel-color-text-secondary);
`;

const colorTertiary = css`
  color: var(--fuel-color-text-tertiary);
`;

const colorError = css`
  color: #c21020; /* Will update to use Fuel Token when available */
`;

const getSizeStyles = (size: FuelSize) => {
  switch (size) {
    case 'xs':
      return sizeXs;
    case 'sm':
      return sizeSm;
    case 'md':
      return sizeMd;
    case 'lg':
      return sizeLg;
    case 'xl':
      return sizeXl;
    case '2xl':
      return size2xl;
    case '3xl':
      return size3xl;
    case '4xl':
      return size4xl;
    case '5xl':
      return size5xl;
  }
}

const getFontWeightStyles = (fontWeight: FuelFontWeight) => {
  switch (fontWeight) {
    case 'regular':
      return fontWeightRegular;
    case 'semibold':
      return fontWeightSemibold;
    case 'bold':
      return fontWeightBold;
  }
}

const getColorStyles = (color: FuelColor) => {
  switch (color) {
    case 'initial':
      return colorInitial;
    case 'inherit':
      return colorInherit;
    case 'primary':
      return colorPrimary;
    case 'secondary':
      return colorSecondary;
    case 'tertiary':
      return colorTertiary;
    case 'error':
      return colorError;
  }
}

export const Typography = React.forwardRef<any, TypographyProps>(
  (
    {
      children,
      variant,
      size,
      fontWeight,
      color,
      ...props
    },
    ref
  ) => {

    const sizeStyles = size && getSizeStyles(size);
    const fontWeightStyles = fontWeight && getFontWeightStyles(fontWeight);
    const colorStyles = color && getColorStyles(color);

    return (
      <MaterialTypography
        css={[sizeStyles, fontWeightStyles, colorStyles]}
        variant={variant}
        ref={ref}
        {...props}
      >
        {children}
      </MaterialTypography>
    );
  });
