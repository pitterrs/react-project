const Tab = function(H) {
    const Tab = function(element) {
        var self = this;
        if (element == window) {
            this.$allTabs = document.querySelectorAll(Tab.selector);
        } else {
            self.$e = element;
        }
    };

    Tab.selector = ".nav-tabs";

    Tab.prototype = {
        createResponsiveTabs: function() {
            var self = this;
            var tabs = $(self.$e).find("li");
            var firstTab = tabs.first();

            var singleTabHeight = firstTab.outerHeight();

            var tabGroupHeight = $(self.$e).outerHeight();

            if (tabGroupHeight > singleTabHeight) {
                var firstTabPosition = firstTab.offset();

                var currentTabPosition;

                tabs.each(function() {
                    var currentTab = $(this);

                    currentTabPosition = currentTab.offset();

                    // If a tab has been force wrapped and below first tab, create a dropdown.
                    if (currentTabPosition.top > firstTabPosition.top) {
                        var dropdown = $(self.$e).find(".responsive-tabs");

                        if (!dropdown.length) {
                            var dropdownHTML =
                                '<li role="presentation" class="nav-item dropdown responsive-tabs">' +
                                '<a class="nav-link dropdown-toggle" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">More</a>' +
                                '<div class="dropdown-menu">' +
                                "</div>";

                            dropdown = $(dropdownHTML);
                            $(self.$e).append(dropdown);
                        }

                        var previousTab = currentTab.prev();
                        var nextTabs = currentTab.nextAll().not(".dropdown");

                        var responsiveDestination = $(
                            ".dropdown-menu",
                            dropdown
                        );

                        if (!currentTab.hasClass("dropdown")) {
                            H.Tab(self.$e).collectTabs(
                                nextTabs,
                                responsiveDestination
                            );
                            H.Tab(self.$e).collectTabs(
                                currentTab,
                                responsiveDestination
                            );
                        }

                        H.Tab(self.$e).collectTabs(
                            previousTab,
                            responsiveDestination
                        );

                        return;
                    }
                });

                // Add the active class on the dropdown if there is an active list item
                if (
                    $(self.$e)
                        .find(".dropdown-menu .dropdown-item")
                        .hasClass("show")
                ) {
                    $(self.$e)
                        .find(".responsive-tabs .dropdown-toggle")
                        .addClass("active");
                }
            } else {
                // Here we are calculating the space and determining whether or not to
                // move the tabs in the dropdown out of the dropdown

                var parentWidth = $(self.$e)
                    .parent()
                    .width();
                var setWidthTab = 0;

                $(self.$e)
                    .children("li")
                    .each(function() {
                        setWidthTab += $(this).outerWidth(true);
                    });

                var horizontalSpaceAvailable = parentWidth - setWidthTab;

                $(self.$e)
                    .find(".dropdown-menu a")
                    .each(function() {
                        if ($(this).data("width") <= horizontalSpaceAvailable) {
                            $(this)
                                .removeClass("dropdown-item")
                                .addClass("nav-link");
                            $(this)
                                .insertBefore(
                                    $(self.$e).find(".responsive-tabs")
                                )
                                .wrap(
                                    '<li role="presentation" class="nav-item"></li>'
                                );

                            horizontalSpaceAvailable -= $(this).data("width");
                        } else {
                            return false;
                        }
                    });

                // Remove the active class on the dropdown if no active list item remains
                if (
                    !$(self.$e)
                        .find(".dropdown-menu .dropdown-item")
                        .hasClass("active")
                ) {
                    $(self.$e)
                        .find(".responsive-tabs .dropdown-toggle")
                        .removeClass("active");
                }

                // Remove the 'More' dropdown if no li values remain in dropdown
                if (!$(self.$e).find(".dropdown-menu a").length) {
                    $(self.$e)
                        .find(".responsive-tabs")
                        .remove();
                }
            }
        },
        responsiveResize: function() {
            for (var i = 0; i < this.$allTabs.length; i++) {
                H.Tab(this.$allTabs[i]).createResponsiveTabs();
            }
        },
        collectTabs: function(tabs, responsiveDestination) {
            // Measure width of tabs
            tabs.each(function() {
                var width = $(this).outerWidth(true);
                $(this)
                    .find("a")
                    .data("width", width);
            });

            tabs.prependTo(responsiveDestination);

            tabs.find("a")
                .unwrap()
                .removeClass("nav-link")
                .addClass("dropdown-item");
        }
    };

    H.Tab = function(a) {
        return new Tab(H.elementOrId(a));
    };

    H.Register.Tab = function(e) {
        H.registerEvents(
            Tab.selector,
            "immediate",
            Tab,
            "createResponsiveTabs",
            e
        );
        H.registerEvents(window, "resize", Tab, "responsiveResize", e);
    };

    H.defaultRegister(H.Register.Tab);
};

module.exports = Tab;
