"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Badge = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Badge = _interopRequireDefault(require("react-bootstrap/Badge"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Badge = function Badge(_ref) {
  var badgeCount = _ref.badgeCount,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["badgeCount", "className", "children"]);

  var classes = (0, _classnames["default"])(badgeCount && "uxf-badge-count", className);
  return /*#__PURE__*/_react["default"].createElement(_Badge["default"], _extends({
    className: classes
  }, props), children);
};

exports.Badge = Badge;
Badge.propTypes = {
  /**
   * Change the underlying component CSS base class name and modifier class names prefix
   *
   * default 'badge'
   */
  bsPrefix: _propTypes["default"].string,

  /**
   * Adds the badge count modifier class
   */
  badgeCount: _propTypes["default"].bool,

  /**
   * The visual style of the badge
   *
   * `"primary"` `"secondary"`
   */
  variant: _propTypes["default"].string.isRequired,

  /**
   * Add the pill modifier to make badges more rounded with
   * some additional horizontal padding
   */
  pill: _propTypes["default"].bool,

  /** Set a custom element for this component */
  as: _propTypes["default"].elementType
};
Badge.defaultProps = {
  variant: "primary",
  badgeCount: false
};