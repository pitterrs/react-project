"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Button = _interopRequireDefault(require("react-bootstrap/Button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Button = function Button(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return /*#__PURE__*/_react["default"].createElement(_Button["default"], props, children);
};

exports.Button = Button;
Button.propTypes = {
  /**
   * Change the underlying component CSS base class name and modifier class names prefix
   * @default 'btn'
   */
  bsPrefix: _propTypes["default"].string,

  /**
   * One or more button variant combinations
   *
   * buttons may be one of a variety of visual variants such as:
   *
   * `"primary"` `"secondary"` `"outline-primary"` `"outline-uxf-yellow"` `"outline-uxf-white"` `"uxf-filter"`
   *
   */
  variant: _propTypes["default"].string,

  /**
   * Specifies a large or small button.
   *
   * `"sm"` `"lg"`
   */
  size: _propTypes["default"].string,

  /** Spans the full width of the Button parent */
  block: _propTypes["default"].bool,

  /** Manually set the visual state of the button to `:active` */
  active: _propTypes["default"].bool,

  /**
   * Disables the Button, preventing mouse events,
   * even if the underlying component is an `<a>` element
   */
  disabled: _propTypes["default"].bool,

  /** Providing a `href` will render an `<a>` element, _styled_ as a button. */
  href: _propTypes["default"].string,

  /**
   * Defines HTML button type attribute.
   *
   * default 'button'
   */
  type: _propTypes["default"].oneOf(["button", "reset", "submit", null]),

  /** Set a custom element for this component */
  as: _propTypes["default"].elementType
};