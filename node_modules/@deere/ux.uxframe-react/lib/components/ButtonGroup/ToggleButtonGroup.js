"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleButtonGroup = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ToggleButtonGroup = _interopRequireDefault(require("react-bootstrap/ToggleButtonGroup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ToggleButtonGroup = function ToggleButtonGroup(_ref) {
  var ariaLabel = _ref.ariaLabel,
      className = _ref.className,
      includeLabel = _ref.includeLabel,
      disabled = _ref.disabled,
      label = _ref.label,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["ariaLabel", "className", "includeLabel", "disabled", "label", "children"]);

  return includeLabel ? /*#__PURE__*/_react["default"].createElement("fieldset", null, /*#__PURE__*/_react["default"].createElement("legend", {
    className: (0, _classnames["default"])("uxf-legend", disabled && "uxf-legend-disabled")
  }, label), /*#__PURE__*/_react["default"].createElement(_ToggleButtonGroup["default"], _extends({
    "aria-label": ariaLabel
  }, props), children)) : /*#__PURE__*/_react["default"].createElement(_ToggleButtonGroup["default"], _extends({
    className: className,
    "aria-label": ariaLabel
  }, props), children);
};

exports.ToggleButtonGroup = ToggleButtonGroup;
ToggleButtonGroup.defaultProps = {
  label: "Example Label",
  includeLabel: false,
  disabled: false
};
ToggleButtonGroup.propTypes = {
  /**
   * Optional label (legend) that describes the
   * contents of the toggle group
   */
  label: _propTypes["default"].string,

  /**
   * Conditional that decides whether or not
   * to include label.
   */
  includeLabel: _propTypes["default"].bool,

  /**
   * Adds disabled class to label
   */
  disabled: _propTypes["default"].bool,

  /**
   * Aria-label of button group. This notifies individuals using a screen reader
   * that they are on a button group component. It is required if the role is "group"
   */
  ariaLabel: _propTypes["default"].string,

  /**
   * An HTML `<input>` name for each child button.
   *
   * __Required if `type` is set to `'radio'`__
   */
  name: _propTypes["default"].string,

  /**
   * The value, or array of values, of the active (pressed) buttons
   *
   * @controllable onChange
   */
  value: _propTypes["default"].any,

  /**
   * Callback fired when a button is pressed, depending on whether the `type`
   * is `'radio'` or `'checkbox'`, `onChange` will be called with the value or
   * array of active values
   *
   * @controllable value
   */
  onChange: _propTypes["default"].func,

  /**
   * The input `type` of the rendered buttons, determines the toggle behavior
   * of the buttons
   */
  type: _propTypes["default"].oneOf(["checkbox", "radio"]).isRequired,

  /**
   * Sets the size for all Buttons in the group.
   *
   * `"sm"` `"lg"`
   */
  size: _propTypes["default"].string,

  /** Make the set of Buttons appear vertically stacked. */
  vertical: _propTypes["default"].bool
};