"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChartsGraphs = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactChartjs = require("react-chartjs-2");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Set defaults.
_reactChartjs.defaults.global.responsive = true;
_reactChartjs.defaults.global.maintainAspectRatio = false;
var colors = ["#367C2B", "#FFDE00", "#BAB994", "#333333", "#FFB000", "#E5E6E6", "#717A80", "#FFF494", "#A3AE58"];

var typeCheck = function typeCheck(o) {
  return typeof o !== "undefined" && o !== null;
};

var ChartsGraphs = function ChartsGraphs(props) {
  var dataType = {
    bar: function bar() {
      var colorIndex = 0;
      var data = props.data.datasets && props.data.datasets.map(function (dataset) {
        !typeCheck(dataset.backgroundColor) && (dataset.backgroundColor = colors);
      });

      var options = props.options && _typeof(props.options) === "object" && _objectSpread({}, props.options);

      typeCheck(props.legend) && (
      /* this type check insures there is not a legend and is not displayed */
      props.legend.display = false);
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "position-relative"
      }, /*#__PURE__*/_react["default"].createElement(_reactChartjs.Bar, _extends({
        data: true,
        options: options
      }, props)));
    },
    line: function line() {
      var colorIndex = 0;
      var data = props.data.datasets && props.data.datasets.map(function (dataset) {
        var incrementBrandColor = false;

        if (!dataset.borderColor) {
          dataset.borderColor = colors[colorIndex];
          incrementBrandColor = true;
        }

        if (!dataset.backgroundColor) {
          dataset.backgroundColor = colors[colorIndex];
          incrementBrandColor = true;
        }

        !dataset.fill && (dataset.fill = false);
        incrementBrandColor && (colorIndex = colors[colorIndex + 1] ? colorIndex + 1 : 0);
      });
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "position-relative"
      }, /*#__PURE__*/_react["default"].createElement(_reactChartjs.Line, _extends({
        data: true,
        options: true
      }, props)));
    },
    pie: function pie() {
      var data = props.data.datasets && props.data.datasets.map(function (dataset) {
        return (dataset.backgroundColor === undefined || dataset.backgroundColor === null) && (dataset.backgroundColor = colors);
      });
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "position-relative"
      }, /*#__PURE__*/_react["default"].createElement(_reactChartjs.Pie, _extends({
        data: true,
        options: true
      }, props)));
    }
  };
  var Component = dataType[props.type];
  return /*#__PURE__*/_react["default"].createElement(Component, null);
};

exports.ChartsGraphs = ChartsGraphs;
ChartsGraphs.propTypes = {
  /**
   * The type of Chart/Graph to generate
   * @type {('bar'|'line'|'pie')}
   */
  type: _propTypes["default"].oneOf(["bar", "line", "pie"]).isRequired,

  /**
   * Object passed that includes data to display on Chart/Graph
   */
  data: _propTypes["default"].object.isRequired,

  /**
   * Configuration options provided by Chart.js
   */
  options: _propTypes["default"].object
};