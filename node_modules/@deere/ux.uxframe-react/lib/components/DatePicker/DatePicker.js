"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePicker = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactFlatpickr = _interopRequireDefault(require("react-flatpickr"));

var _Form = _interopRequireDefault(require("react-bootstrap/Form"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DatePicker = function DatePicker(_ref) {
  var labelText = _ref.labelText,
      inputAriaLabel = _ref.inputAriaLabel,
      id = _ref.id,
      placeholder = _ref.placeholder,
      options = _ref.options,
      hideLabel = _ref.hideLabel,
      disableMobile = _ref.disableMobile,
      dateFormat = _ref.dateFormat,
      flatPickrOptions = _ref.flatPickrOptions,
      inputProps = _ref.inputProps,
      props = _objectWithoutProperties(_ref, ["labelText", "inputAriaLabel", "id", "placeholder", "options", "hideLabel", "disableMobile", "dateFormat", "flatPickrOptions", "inputProps"]);

  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: "uxf-date-picker"
  }, props), !hideLabel && /*#__PURE__*/_react["default"].createElement(_Form["default"].Label, {
    htmlFor: id,
    className: "uxf-date-picker-label uxf-label"
  }, labelText), /*#__PURE__*/_react["default"].createElement(_reactFlatpickr["default"], _extends({
    id: id,
    placeholder: placeholder,
    className: "form-control uxf-date-picker-input",
    "aria-label": inputAriaLabel,
    "data-date-format": dateFormat,
    "data-disable-mobile": disableMobile,
    options: flatPickrOptions,
    "data-next-arrow": "<svg class=\"uxf-btn-icon\" fill=\"#666666\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/></svg>",
    "data-prev-arrow": "<svg class=\"uxf-btn-icon\" fill=\"#666666\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" /><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /></svg>"
  }, inputProps)));
};

exports.DatePicker = DatePicker;
DatePicker.propTypes = {
  /**
   * Input label text
   * @default 'Select Date'
   */
  labelText: _propTypes["default"].string,

  /**
   * Label for assistive technology users
   * to know format expected within input.
   */
  inputAriaLabel: _propTypes["default"].string.isRequired,

  /**
   * Unique id used for Flatpickr
   */
  id: _propTypes["default"].string.isRequired,

  /**
   * Placeholder text within input
   */
  placeholder: _propTypes["default"].string,

  /**
   * Controls display of label
   */
  hideLabel: _propTypes["default"].bool,

  /**
   * Disables native datetime inputs on mobile devices
   */
  disableMobile: _propTypes["default"].bool,

  /**
   * Format of date expected by Flatpickr
   */
  dateFormat: _propTypes["default"].string,

  /**
   * Flatpickr options: https://flatpickr.js.org/options/
   */
  flatPickrOptions: _propTypes["default"].object,

  /**
   * Add props to internal input
   */
  inputProps: _propTypes["default"].object
};
DatePicker.defaultProps = {
  labelText: "Select Date",
  placeholder: "dd-mmm-yyyy",
  hideLabel: false,
  disableMobile: true,
  dateFormat: "d-M-Y"
};