"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dropdown = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Dropdown = _interopRequireDefault(require("react-bootstrap/Dropdown"));

var _DropdownToggle = _interopRequireDefault(require("react-bootstrap/DropdownToggle"));

var _DropdownMenu = _interopRequireDefault(require("react-bootstrap/DropdownMenu"));

var _DropdownItem = _interopRequireDefault(require("react-bootstrap/DropdownItem"));

var _createWithBsPrefix = _interopRequireDefault(require("../utils/createWithBsPrefix"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DropdownHeader = (0, _createWithBsPrefix["default"])("dropdown-header", {
  defaultProps: {
    role: "heading"
  }
});
var DropdownDivider = (0, _createWithBsPrefix["default"])("dropdown-divider", {
  defaultProps: {
    role: "separator"
  }
});
var DropdownItemText = (0, _createWithBsPrefix["default"])("dropdown-item-text", {
  Component: "span"
});

var Dropdown = function Dropdown(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return /*#__PURE__*/_react["default"].createElement(_Dropdown["default"], props, children);
};

exports.Dropdown = Dropdown;
Dropdown.propTypes = {
  /**
   * Change the underlying component CSS base class name and modifier class names prefix
   * @default 'dropdown'
   */
  bsPrefix: _propTypes["default"].string,

  /**
   * Determines the direction and location of the Menu in relation to it's Toggle.
   */
  drop: _propTypes["default"].oneOf(["up", "left", "right", "down"]),
  as: _propTypes["default"].elementType,

  /**
   * Align the menu to the right side of the Dropdown toggle
   */
  alignRight: _propTypes["default"].bool,

  /**
   * Whether or not the Dropdown is visible.
   *
   * @controllable onToggle
   */
  show: _propTypes["default"].bool,

  /**
   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to
   * Popper.js's flip [docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled).
   *
   */
  flip: _propTypes["default"].bool,

  /**
   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.
   *
   * @controllable show
   */
  onToggle: _propTypes["default"].func,

  /**
   * A callback fired when a menu item is selected.
   */
  onSelect: _propTypes["default"].func,

  /**
   * Controls the focus behavior for when the Dropdown is opened. Set to
   * `true` to always focus the first menu item, `keyboard` to focus only when
   * navigating via the keyboard, or `false` to disable completely
   *
   * The Default behavior is `false` **unless** the Menu has a `role="menu"`
   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).
   */
  focusFirstItemOnShow: _propTypes["default"].oneOf([false, true, "keyboard"]),

  /** @private */
  navbar: _propTypes["default"].bool
};
Dropdown.Divider = DropdownDivider;
Dropdown.Header = DropdownHeader;
Dropdown.Item = _DropdownItem["default"];
Dropdown.ItemText = DropdownItemText;
Dropdown.Menu = _DropdownMenu["default"];
Dropdown.Toggle = _DropdownToggle["default"];