"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileUpload = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var FileUpload = /*#__PURE__*/function (_React$Component) {
  _inherits(FileUpload, _React$Component);

  var _super = _createSuper(FileUpload);

  function FileUpload(props) {
    var _this;

    _classCallCheck(this, FileUpload);

    _this = _super.call(this, props);
    _this.state = {
      activeFile: false,
      activeFileLabel: []
    };
    _this.handleRemoveClick = _this.handleRemoveClick.bind(_assertThisInitialized(_this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.openFileInput = _this.openFileInput.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FileUpload, [{
    key: "handleRemoveClick",
    value: function handleRemoveClick() {
      this.setState({
        activeFileLabel: []
      });
      this.setState({
        activeFile: false
      });
      this.fileUpload.value = "";
      this.fileUploadLabel.focus();
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      if (e.target.files.length > 0) {
        this.setState({
          activeFile: true
        });
        var fileNameLabelArray = [];

        for (var x = 0; x < e.target.files.length; x++) {
          var fileName = e.target.files[x]["name"];
          fileNameLabelArray.push(fileName);
          this.setState({
            activeFileLabel: fileNameLabelArray
          });
        }
      } else {
        this.setState({
          activeFile: false
        });
      }

      this.fileUploadLabel.focus();
    }
  }, {
    key: "openFileInput",
    value: function openFileInput(e) {
      if (e.which == 13 || e.which == 32) {
        // Prevents space bar click from moving page down when file upload dialog closes
        e.preventDefault();
        this.fileUpload.click();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          id = _this$props.id,
          className = _this$props.className,
          label = _this$props.label,
          variant = _this$props.variant,
          multiple = _this$props.multiple,
          props = _objectWithoutProperties(_this$props, ["id", "className", "label", "variant", "multiple"]);

      var labelClasses = (0, _classnames["default"])("btn", "uxf-file-input", variant);
      var fileUploadClasses = (0, _classnames["default"])("custom-file", className);
      var fileLabelList = this.state.activeFileLabel.map(function (fileLabel, index) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: "uxf-file-input-group",
          key: index
        }, /*#__PURE__*/_react["default"].createElement("p", {
          className: "uxf-file-input-text text-truncate"
        }, fileLabel), !multiple && /*#__PURE__*/_react["default"].createElement("button", {
          onClick: _this2.handleRemoveClick,
          className: "btn uxf-btn-icon",
          "aria-label": "Remove File"
        }, /*#__PURE__*/_react["default"].createElement("svg", {
          fill: "#666666",
          focusable: "false",
          xmlns: "http://www.w3.org/2000/svg",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        }, /*#__PURE__*/_react["default"].createElement("path", {
          d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
        }), /*#__PURE__*/_react["default"].createElement("path", {
          d: "M0 0h24v24H0z",
          fill: "none"
        }))));
      });
      return /*#__PURE__*/_react["default"].createElement("div", _extends({
        className: fileUploadClasses
      }, props), /*#__PURE__*/_react["default"].createElement("input", {
        type: "file",
        id: id,
        tabIndex: "-1",
        ref: function ref(_ref) {
          return _this2.fileUpload = _ref;
        },
        className: "custom-file-input",
        multiple: multiple,
        onChange: this.handleChange
      }), /*#__PURE__*/_react["default"].createElement("label", {
        className: labelClasses,
        ref: function ref(_ref2) {
          return _this2.fileUploadLabel = _ref2;
        },
        tabIndex: "0",
        onKeyDown: this.openFileInput,
        htmlFor: id
      }, label), !this.state.activeFile && /*#__PURE__*/_react["default"].createElement("p", {
        className: "uxf-file-input-text"
      }, "No file chosen"), this.state.activeFile && fileLabelList);
    }
  }]);

  return FileUpload;
}(_react["default"].Component);

exports.FileUpload = FileUpload;
FileUpload.propTypes = {
  /**
   * An html id attribute for the FileUpload input, necessary for assistive technologies, such as screen readers.
   */
  id: _propTypes["default"].string.isRequired,

  /**
   * Button variant. Gives the option to select type of button.
   */
  variant: _propTypes["default"].string,

  /**
   * Label associated with file input.
   */
  label: _propTypes["default"].string,

  /**
   * Gives the option to add multiple files at one time.
   */
  multiple: _propTypes["default"].bool
};
FileUpload.defaultProps = {
  variant: "btn-secondary",
  label: "Choose file",
  multiple: false
};