"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Form = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Form = _interopRequireDefault(require("react-bootstrap/Form"));

var _createWithBsPrefix = _interopRequireDefault(require("../utils/createWithBsPrefix"));

var _FormGroup = _interopRequireDefault(require("react-bootstrap/FormGroup"));

var _FormControl = _interopRequireDefault(require("react-bootstrap/FormControl"));

var _FormCheck = _interopRequireDefault(require("react-bootstrap/FormCheck"));

var _FormLabel = _interopRequireDefault(require("react-bootstrap/FormLabel"));

var _FormText = _interopRequireDefault(require("react-bootstrap/FormText"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Form = function Form(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return /*#__PURE__*/_react["default"].createElement(_Form["default"], props, children);
};

exports.Form = Form;
Form.propTypes = {
  /**
   * @default {'form'}
   */
  bsPrefix: _propTypes["default"].string,

  /**
   * Display the series of labels, form controls,
   * and buttons on a single horizontal row
   */
  inline: _propTypes["default"].bool,

  /**
   * Mark a form as having been validated. Setting it to `true` will
   * toggle any validation styles on the forms elements.
   */
  validated: _propTypes["default"].bool,
  as: _propTypes["default"].elementType
};
Form.Row = (0, _createWithBsPrefix["default"])("form-row");
Form.Group = _FormGroup["default"];
Form.Control = _FormControl["default"];
Form.Check = _FormCheck["default"];
Form.Label = _FormLabel["default"];
Form.Text = _FormText["default"];