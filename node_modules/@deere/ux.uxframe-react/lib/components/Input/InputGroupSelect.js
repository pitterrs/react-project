"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputGroupSelect = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = require("../Button/");

var _Form = require("../Form/");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputGroupSelect = /*#__PURE__*/function (_React$Component) {
  _inherits(InputGroupSelect, _React$Component);

  var _super = _createSuper(InputGroupSelect);

  function InputGroupSelect(props) {
    var _this;

    _classCallCheck(this, InputGroupSelect);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "onSelectedItemChange", function (event) {
      _this.setState({
        selectedItem: event.target.value
      });
    });

    _this.onSelectedItemChange = _this.onSelectedItemChange.bind(_assertThisInitialized(_this));
    _this.state = {
      selectedItem: props.value
    };
    return _this;
  }

  _createClass(InputGroupSelect, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          ariaLabel = _this$props.ariaLabel,
          selectProps = _this$props.selectProps,
          spanProps = _this$props.spanProps;
      var spanClasses = (0, _classnames["default"])('dropdown-toggle', 'uxf-custom-select', spanProps.className);
      var selectClasses = (0, _classnames["default"])('custom-select', selectProps.className);
      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Form.Form.Control, _extends({
        className: selectClasses,
        "aria-label": ariaLabel,
        onChange: this.onSelectedItemChange,
        value: this.state.selectedItem,
        as: "select"
      }, selectProps), children), /*#__PURE__*/_react["default"].createElement(_Button.Button, _extends({
        as: "span",
        "aria-hidden": "true",
        type: null,
        className: spanClasses
      }, spanProps), this.state.selectedItem));
    }
  }]);

  return InputGroupSelect;
}(_react["default"].Component);

exports.InputGroupSelect = InputGroupSelect;
InputGroupSelect.propTypes = {
  /**
    * Aria-label of input. This is required due to the
    * input group component not having a label associated with it.
  */
  ariaLabel: _propTypes["default"].string.isRequired,

  /**
    * Additional props passed to the select element
  */
  selectProps: _propTypes["default"].object,

  /**
    * Additional props passed to the span element
  */
  spanProps: _propTypes["default"].object
};
InputGroupSelect.defaultProps = {
  selectProps: {},
  spanProps: {}
};