"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Nav = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _all = _interopRequireDefault(require("prop-types-extra/lib/all"));

var _react = _interopRequireDefault(require("react"));

var _Nav = _interopRequireDefault(require("react-bootstrap/Nav"));

var _NavItem = _interopRequireDefault(require("react-bootstrap/NavItem"));

var _NavLink = _interopRequireDefault(require("react-bootstrap/NavLink"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Nav = function Nav(_ref) {
  var className = _ref.className,
      children = _ref.children,
      ariaLabel = _ref.ariaLabel,
      props = _objectWithoutProperties(_ref, ["className", "children", "ariaLabel"]);

  return /*#__PURE__*/_react["default"].createElement(_Nav["default"], _extends({}, props, {
    className: className,
    "aria-label": ariaLabel
  }), children);
};

exports.Nav = Nav;
Nav.propTypes = {
  /**
   * Aria-label for element
   */
  ariaLabel: _propTypes["default"].string,

  /**
   * @default 'nav'
   */
  bsPrefix: _propTypes["default"].string,

  /** @private */
  navbarBsPrefix: _propTypes["default"].string,

  /** @private */
  cardHeaderBsPrefix: _propTypes["default"].string,

  /**
   * The visual variant of the nav items.
   *
   * `"tabs"` `"pills"`
   */
  variant: _propTypes["default"].string,

  /**
   * Marks the NavItem with a matching `eventKey` (or `href` if present) as active.
   *
   * @type {string}
   */
  activeKey: _propTypes["default"].any,

  /**
   * Have all `NavItem`s proportionately fill all available width.
   */
  fill: _propTypes["default"].bool,

  /**
   * Have all `NavItem`s evenly fill all available width.
   *
   * @type {boolean}
   */
  justify: (0, _all["default"])(_propTypes["default"].bool, function (_ref2) {
    var justify = _ref2.justify,
        navbar = _ref2.navbar;
    return justify && navbar ? Error("justify navbar `Nav`s are not supported") : null;
  }),

  /**
   * A callback fired when a NavItem is selected.
   */
  onSelect: _propTypes["default"].func,

  /**
   * ARIA role for the Nav, in the context of a TabContainer, the default will
   * be set to "tablist", but can be overridden by the Nav when set explicitly.
   *
   * When the role is "tablist", NavLink focus is managed according to
   * the ARIA authoring practices for tabs:
   * https://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#tabpanel
   */
  role: _propTypes["default"].string,

  /**
   * Apply styling an alignment for use in a Navbar. This prop will be set
   * automatically when the Nav is used inside a Navbar.
   */
  navbar: _propTypes["default"].bool,
  as: _propTypes["default"].elementType,

  /** @private */
  onKeyDown: _propTypes["default"].func
};
Nav.Item = _NavItem["default"];
Nav.Link = _NavLink["default"];