"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavWidget = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = _interopRequireDefault(require("react-bootstrap/Button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var NavWidget = function NavWidget(_ref) {
  var ariaLabel = _ref.ariaLabel,
      value = _ref.value,
      variant = _ref.variant,
      maxValue = _ref.maxValue,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["ariaLabel", "value", "variant", "maxValue", "className", "children"]);

  var classes = (0, _classnames["default"])('uxf-nav-widget', variant == 'notification' && 'uxf-notification-widget', variant == 'cart' && 'uxf-cart-widget', className);
  var parsedValue = parseInt(value);

  if (parsedValue > maxValue) {
    parsedValue = "".concat(maxValue, "+");
  }

  var currentAriaLabel = variant == 'notification' ? "".concat(parsedValue, " ").concat(variant, "s") : "".concat(parsedValue, " ").concat(variant, " items");
  var emptyAriaLabel = currentAriaLabel;

  if (parseInt(parsedValue) > 0) {
    emptyAriaLabel = null;
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Button["default"], _extends({
    variant: "link",
    className: classes,
    "aria-label": ariaLabel && emptyAriaLabel ? ariaLabel : emptyAriaLabel
  }, props), children, parseInt(parsedValue) > 0 && /*#__PURE__*/_react["default"].createElement("span", {
    className: "uxf-badge-number",
    "aria-label": ariaLabel ? ariaLabel : currentAriaLabel
  }, parsedValue)));
};

exports.NavWidget = NavWidget;
NavWidget.propTypes = {
  /**
   * Aria-label for navigation widget button. This is generated automatically for notifications and cart items.
   */
  ariaLabel: _propTypes["default"].string,

  /**
   * Number associated with widget. For example, the number of items in a cart or the number of notifications.
   */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /**
   * Variant of widget. Default options include 'notification' and 'cart'
   */
  variant: _propTypes["default"].string,

  /**
   * Max value. A max value of 99 will display '99+' if there are
   * more than 99 items.
   */
  maxValue: _propTypes["default"].number
};
NavWidget.defaultProps = {
  value: 0,
  variant: 'notification',
  maxValue: 99
};