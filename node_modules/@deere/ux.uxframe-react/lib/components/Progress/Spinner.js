"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spinner = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Spinner = _interopRequireDefault(require("react-bootstrap/Spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Spinner = function Spinner(_ref) {
  var accessibilityLabel = _ref.accessibilityLabel,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["accessibilityLabel", "children"]);

  return /*#__PURE__*/_react["default"].createElement(_Spinner["default"], _extends({}, props, {
    role: "status"
  }), accessibilityLabel && /*#__PURE__*/_react["default"].createElement("span", {
    className: "sr-only"
  }, accessibilityLabel), children);
};

exports.Spinner = Spinner;
Spinner.propTypes = {
  /**
   * Change the underlying component CSS base class name and modifier class names prefix
   * @default 'spinner'
   */
  bsPrefix: _propTypes["default"].string,

  /**
   * Changes the animation style of the spinner.
   */
  animation: _propTypes["default"].string,

  /**
   * This component may be used to wrap child elements or components.
   */
  children: _propTypes["default"].element,

  /**
   * @default div
   */
  as: _propTypes["default"].elementType,

  /**
   * Label for assistive technology users
   * to know what kind of status change is occurring.
   */
  accessibilityLabel: _propTypes["default"].string
};