"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioButton = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Form = _interopRequireDefault(require("react-bootstrap/Form"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var RadioButton = function RadioButton(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return /*#__PURE__*/_react["default"].createElement(_Form["default"].Check, _extends({
    type: "radio",
    custom: true
  }, props));
};

exports.RadioButton = RadioButton;
RadioButton.propTypes = {
  /**
   * The underlying HTML element to use when rendering the RadioButton.
   *
   * @type {('input'|elementType)}
   */
  as: _propTypes["default"].elementType,

  /** A HTML id attribute, necessary for proper form accessibility. */
  id: _propTypes["default"].string,
  inline: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  title: _propTypes["default"].string,

  /** A label, necessary for proper form accessibility. */
  label: _propTypes["default"].node,

  /** Manually style the input as valid */
  isValid: _propTypes["default"].bool,

  /** Manually style the input as invalid */
  isInvalid: _propTypes["default"].bool,

  /** Display feedback as a tooltip. */
  feedbackTooltip: _propTypes["default"].bool,

  /** A message to display when the input is in a validation state */
  feedback: _propTypes["default"].node
};