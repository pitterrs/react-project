"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchInput = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Form = require("../Form");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var SearchInput = function SearchInput(_ref) {
  var ariaLabel = _ref.ariaLabel,
      placeholder = _ref.placeholder,
      className = _ref.className,
      innerRef = _ref.innerRef,
      props = _objectWithoutProperties(_ref, ["ariaLabel", "placeholder", "className", "innerRef"]);

  var classes = (0, _classnames["default"])('uxf-search-bar', className);
  return /*#__PURE__*/_react["default"].createElement(_Form.Form.Control, _extends({
    ref: innerRef,
    type: "search",
    className: classes,
    "aria-label": ariaLabel,
    placeholder: placeholder
  }, props));
};

exports.SearchInput = SearchInput;
SearchInput.propTypes = {
  /**
   * Aria-label of search input. This is required due to the
   * search component not having a label associated with it.
   */
  ariaLabel: _propTypes["default"].string.isRequired,

  /**
   * Placeholder for search input.
   */
  placeholder: _propTypes["default"].string
};
SearchInput.defaultProps = {
  placeholder: 'Search'
};