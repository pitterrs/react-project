"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatusIndicator = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var StatusIndicator = function StatusIndicator(_ref) {
  var accessibilityLabel = _ref.accessibilityLabel,
      className = _ref.className,
      variant = _ref.variant,
      prefix = _ref.prefix,
      props = _objectWithoutProperties(_ref, ["accessibilityLabel", "className", "variant", "prefix"]);

  var classes = (0, _classnames["default"])("uxf-statusDot", "".concat(prefix, "-").concat(variant), className);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("span", _extends({
    className: classes
  }, props)), accessibilityLabel && /*#__PURE__*/_react["default"].createElement("span", {
    className: "sr-only"
  }, accessibilityLabel));
};

exports.StatusIndicator = StatusIndicator;
StatusIndicator.propTypes = {
  /**
   * Prefix for status indicator variant
   */
  prefix: _propTypes["default"].string,

  /**
   * Status indicator variants
   *
   * `"success"` `"warning"` `"danger"` `"info"`
   */
  variant: _propTypes["default"].string,

  /**
   * Used to provide additional context to assistive technologies
   */
  accessibilityLabel: _propTypes["default"].string
};
StatusIndicator.defaultProps = {
  prefix: "uxf-statusDot",
  variant: "success"
};